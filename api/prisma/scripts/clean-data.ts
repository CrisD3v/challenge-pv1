import { PrismaClient } from '@prisma/client';

/**
 * Script para limpiar datos de la base de datos
 *
 * Este script proporciona una forma segura de limpiar datos de desarrollo
 * y testing de la base de datos. √ötil para resetear el estado antes de
 * ejecutar nuevos seeders o pruebas.
 *
 * ‚ö†Ô∏è ADVERTENCIA: Este script elimina datos permanentemente.
 * Solo usar en entornos de desarrollo y testing.
 */

const prisma = new PrismaClient();

/**
 * Opciones de limpieza disponibles
 */
interface CleanOptions {
  /** Limpiar elementos de carritos */
  cartItems?: boolean;
  /** Limpiar elementos de √≥rdenes */
  orderItems?: boolean;
  /** Limpiar carritos completos */
  carts?: boolean;
  /** Limpiar √≥rdenes completas */
  orders?: boolean;
  /** Limpiar productos */
  products?: boolean;
  /** Limpiar eventos */
  events?: boolean;
  /** Limpiar archivos subidos */
  files?: boolean;
  /** Limpiar todo */
  all?: boolean;
}

/**
 * Limpia datos espec√≠ficos seg√∫n las opciones proporcionadas
 */
async function cleanData(options: CleanOptions = {}) {
  try {
    console.log('üßπ Iniciando limpieza de datos...\n');

    let totalDeleted = 0;

    // Si se especifica 'all', activar todas las opciones
    if (options.all) {
      options = {
        cartItems: true,
        orderItems: true,
        carts: true,
        orders: true,
        products: true,
        events: true,
        files: true,
      };
    }

    // Limpiar en orden correcto (respetando foreign keys)

    // 1. Elementos de carritos (dependen de carritos y productos/eventos)
    if (options.cartItems) {
      console.log('üóëÔ∏è  Eliminando elementos de carritos...');
      const result = await prisma.cartItem.deleteMany();
      console.log(`   ‚úÖ ${result.count} elementos de carritos eliminados`);
      totalDeleted += result.count;
    }

    // 2. Elementos de √≥rdenes (dependen de √≥rdenes y productos/eventos)
    if (options.orderItems) {
      console.log('üóëÔ∏è  Eliminando elementos de √≥rdenes...');
      const result = await prisma.orderItem.deleteMany();
      console.log(`   ‚úÖ ${result.count} elementos de √≥rdenes eliminados`);
      totalDeleted += result.count;
    }

    // 3. Carritos (despu√©s de eliminar sus elementos)
    if (options.carts) {
      console.log('üóëÔ∏è  Eliminando carritos...');
      const result = await prisma.cart.deleteMany();
      console.log(`   ‚úÖ ${result.count} carritos eliminados`);
      totalDeleted += result.count;
    }

    // 4. √ìrdenes (despu√©s de eliminar sus elementos)
    if (options.orders) {
      console.log('üóëÔ∏è  Eliminando √≥rdenes...');
      const result = await prisma.order.deleteMany();
      console.log(`   ‚úÖ ${result.count} √≥rdenes eliminadas`);
      totalDeleted += result.count;
    }

    // 5. Productos (despu√©s de eliminar referencias)
    if (options.products) {
      console.log('üóëÔ∏è  Eliminando productos...');
      const result = await prisma.product.deleteMany();
      console.log(`   ‚úÖ ${result.count} productos eliminados`);
      totalDeleted += result.count;
    }

    // 6. Eventos (despu√©s de eliminar referencias)
    if (options.events) {
      console.log('üóëÔ∏è  Eliminando eventos...');
      const result = await prisma.event.deleteMany();
      console.log(`   ‚úÖ ${result.count} eventos eliminados`);
      totalDeleted += result.count;
    }

    // 7. Archivos subidos
    if (options.files) {
      console.log('üóëÔ∏è  Eliminando archivos...');
      const result = await prisma.uploadedFile.deleteMany();
      console.log(`   ‚úÖ ${result.count} archivos eliminados`);
      totalDeleted += result.count;
    }

    console.log(`\nüìä Resumen de limpieza:`);
    console.log(`   ‚Ä¢ Total registros eliminados: ${totalDeleted}`);

    if (totalDeleted === 0) {
      console.log('   ‚ÑπÔ∏è  No se eliminaron registros (base de datos ya estaba limpia o no se especificaron opciones)');
    }

    console.log('\n‚úÖ Limpieza completada exitosamente!');

  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Funci√≥n para limpieza completa (todos los datos)
 */
async function cleanAll() {
  console.log('‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n eliminar√° TODOS los datos de la base de datos.');
  console.log('   Solo contin√∫a si est√°s seguro de que quieres proceder.\n');

  await cleanData({ all: true });
}

/**
 * Funci√≥n para limpieza solo de items (productos y eventos)
 */
async function cleanItems() {
  console.log('üßπ Limpiando solo productos y eventos (y sus referencias)...\n');

  await cleanData({
    cartItems: true,
    orderItems: true,
    products: true,
    events: true,
  });
}

/**
 * Funci√≥n para limpieza solo de transacciones (carritos y √≥rdenes)
 */
async function cleanTransactions() {
  console.log('üßπ Limpiando solo carritos y √≥rdenes...\n');

  await cleanData({
    cartItems: true,
    orderItems: true,
    carts: true,
    orders: true,
  });
}

// Ejecutar seg√∫n argumentos de l√≠nea de comandos
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0] || 'help';

  switch (command) {
    case 'all':
      cleanAll().catch(console.error);
      break;
    case 'items':
      cleanItems().catch(console.error);
      break;
    case 'transactions':
      cleanTransactions().catch(console.error);
      break;
    case 'help':
    default:
      console.log('üßπ Script de limpieza de datos\n');
      console.log('Uso:');
      console.log('  pnpm run db:clean:all          # Eliminar todos los datos');
      console.log('  pnpm run db:clean:items        # Eliminar solo productos y eventos');
      console.log('  pnpm run db:clean:transactions # Eliminar solo carritos y √≥rdenes');
      console.log('\nComandos directos:');
      console.log('  pnpm exec ts-node prisma/scripts/clean-data.ts all');
      console.log('  pnpm exec ts-node prisma/scripts/clean-data.ts items');
      console.log('  pnpm exec ts-node prisma/scripts/clean-data.ts transactions');
      console.log('\n‚ö†Ô∏è  ADVERTENCIA: Estos comandos eliminan datos permanentemente.');
      console.log('   Solo usar en entornos de desarrollo y testing.');
      break;
  }
}

export { cleanAll, cleanData, cleanItems, cleanTransactions };
