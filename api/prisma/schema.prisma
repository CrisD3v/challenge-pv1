// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ItemType {
  PRODUCT
  EVENT
}

model Product {
  id          String   @id @default(cuid())
  name        String
  thumbnail   String?
  description String?
  unit        Int      @default(1)
  unitPrice   Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relación inversa con CartItem
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@index([name])
}

model Event {
  id          String   @id @default(uuid())
  name        String
  thumbnail   String?
  description String?
  unit        Int      @default(1)
  unitPrice   Float    @default(0)
  date        DateTime
  location    String
  duration    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relación inversa con CartItem
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@index([date])
  @@index([name])
}

model Cart {
  id        String     @id @default(cuid())
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id     String @id @default(cuid())
  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  // Polimorfismo
  itemType  ItemType
  productId String?
  eventId   String?

  quantity Int @default(1)

  // Relaciones opcionales
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  event   Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([productId])
  @@index([eventId])
}

model Order {
  id        String      @id @default(cuid())
  items     OrderItem[]
  total     Float       @default(0)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Polimorfismo
  itemType  ItemType
  productId String?
  eventId   String?

  quantity  Int
  unitPrice Float // Guardar precio al momento de la compra

  // Relaciones opcionales
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  event   Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
  @@index([eventId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model UploadedFile {
  id           String   @id @default(cuid())
  originalName String
  fileName     String   @unique
  mimeType     String
  size         Int
  path         String
  url          String
  createdAt    DateTime @default(now())

  @@index([mimeType])
  @@index([createdAt])
}
